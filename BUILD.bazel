load("@protobuf//bazel:cc_proto_library.bzl", "cc_proto_library")
load("@protobuf//bazel:proto_library.bzl", "proto_library")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")

package(default_visibility = ["//visibility:public"])

proto_library(
    name = "sparrowhawk_configuration_proto",
    srcs = ["src/proto/sparrowhawk_configuration.proto"],
)

cc_proto_library(
    name = "sparrowhawk_configuration_cc_proto",
    deps = [":sparrowhawk_configuration_proto"],
)

proto_library(
    name = "rule_order_proto",
    srcs = ["src/proto/rule_order.proto"],
)

cc_proto_library(
    name = "rule_order_cc_proto",
    deps = [":rule_order_proto"],
)

proto_library(
    name = "links_proto",
    srcs = ["src/proto/links.proto"],
)

cc_proto_library(
    name = "links_cc_proto",
    deps = [":links_proto"],
)

proto_library(
    name = "semiotic_classes_proto",
    srcs = ["src/proto/semiotic_classes.proto"],
)

cc_proto_library(
    name = "semiotic_classes_cc_proto",
    deps = ["semiotic_classes_proto"],
)

proto_library(
    name = "items_proto",
    srcs = ["src/proto/items.proto"],
    deps = [
        ":links_proto",
        ":semiotic_classes_proto",
    ],
)

cc_proto_library(
    name = "items_cc_proto",
    deps = [":items_proto"],
)

proto_library(
    name = "serialization_spec_proto",
    srcs = ["src/proto/serialization_spec.proto"],
    deps = [
        ":links_proto",
        ":semiotic_classes_proto",
    ],
)

cc_proto_library(
    name = "serialization_spec_cc_proto",
    deps = [":serialization_spec_proto"],
)

cc_library(
    name = "utils",
    srcs = [
        "src/lib/io_utils.cc",
        "src/lib/string_utils.cc",
    ],
    hdrs = [
        "src/include/sparrowhawk/io_utils.h",
        "src/include/sparrowhawk/logger.h",
        "src/include/sparrowhawk/string_utils.h",
    ],
    copts = ["-Wno-sign-compare"],
    includes = ["src/include"],
    visibility = ["//visibility:private"],
    deps = ["@openfst//:base"],
)

cc_library(
    name = "regexp",
    srcs = ["src/lib/regexp.cc"],
    hdrs = ["src/include/sparrowhawk/regexp.h"],
    includes = ["src/include"],
    visibility = ["//visibility:private"],
    deps = [
        ":utils",
        "@openfst//:base",
        "@re2",
    ],
)

cc_library(
    name = "sentence_boundary",
    srcs = ["src/lib/sentence_boundary.cc"],
    hdrs = ["src/include/sparrowhawk/sentence_boundary.h"],
    copts = ["-Wno-sign-compare"],
    includes = ["src/include"],
    deps = [
        ":regexp",
        ":utils",
        "@openfst//:base",
    ],
)

cc_library(
    name = "normalizer_lib",
    srcs = [
        "src/lib/field_path.cc",
        "src/lib/normalizer.cc",
        "src/lib/normalizer_utils.cc",
        "src/lib/numbers.cc",
        "src/lib/protobuf_parser.cc",
        "src/lib/protobuf_serializer.cc",
        "src/lib/record_serializer.cc",
        "src/lib/rule_system.cc",
        "src/lib/spec_serializer.cc",
        "src/lib/style_serializer.cc",
    ],
    hdrs = [
        "src/include/sparrowhawk/field_path.h",
        "src/include/sparrowhawk/normalizer.h",
        "src/include/sparrowhawk/numbers.h",
        "src/include/sparrowhawk/protobuf_parser.h",
        "src/include/sparrowhawk/protobuf_serializer.h",
        "src/include/sparrowhawk/record_serializer.h",
        "src/include/sparrowhawk/rule_system.h",
        "src/include/sparrowhawk/spec_serializer.h",
        "src/include/sparrowhawk/style_serializer.h",
    ],
    copts = [
        "-Wno-sign-compare",
        "-Wno-maybe-uninitialized",
    ],
    includes = [
        "src/include",
    ],
    deps = [
        ":items_cc_proto",
        ":links_cc_proto",
        ":rule_order_cc_proto",
        ":semiotic_classes_cc_proto",
        ":sentence_boundary",
        ":serialization_spec_cc_proto",
        ":sparrowhawk_configuration_cc_proto",
        ":utils",
        "@openfst//:base",
        "@re2",
        "@thrax",
    ],
)

cc_binary(
    name = "normalizer",
    srcs = ["src/bin/normalizer_main.cc"],
    deps = [
        ":normalizer_lib",
        "@abseil-cpp//absl/flags:flag",
    ],
)
